import unittest
import os
from main import TextProcessor


class TestProcessor(unittest.TestCase):

    def setUp(self):
        import os
        self.BASE_PATH = os.path.dirname(os.path.abspath(__file__))
        self.filepath = ""
        # A variable to maintain at the end of each test
        # files generated by them
        self.maintain_files = False

    def test_csv_read(self):
        filepath = self.BASE_PATH + "/mockups/concessionario.csv"
        processor = TextProcessor()
        processor.read_csv(filepath)
        print(processor.list_rows)

    def test_csv_writter(self):
        filepath = self.BASE_PATH + "/mockups/concessionario.csv"
        processor = TextProcessor()
        processor.read_csv(filepath)

        self.filepath = self.BASE_PATH + "/mockups/nuovo_csv.csv"
        processor.write_csv(self.filepath)
        self.assertTrue(os.path.exists(self.filepath))

    def test_json_reader(self):
        filepath = self.BASE_PATH + "/mockups/concessionario.json"
        processor = TextProcessor()
        json_dict = processor.read_json(filepath)
        self.assertIsNone(json_dict)

    def test_json_writer(self):
        self.filepath = self.BASE_PATH + "/mockups/nuovo_json.json"
        processor = TextProcessor()
        to_parse = {
            'nome': 'Silvia',
            "cognome": "Rossi",
            "admin": False,
            "mascote": 5,
            "figli": {
                "femmine": ["Clara", "Francesca"],
                "maschi": []
            } 
        }
        processor.write_json(self.filepath, to_parse)

        self.assertTrue(os.path.exists(self.filepath))

    def test_json_datetime(self):
        import datetime

        self.filepath = self.BASE_PATH + "/mockups/nuovo_json.json"
        processor = TextProcessor()
        today = datetime.datetime.now()
        to_parse = {
            'nome': 'Silvia',
            "cognome": "Rossi",
            "admin": False,
            "mascote": 5,
            "figli": {
                "femmine": ["Clara", "Francesca"],
                "maschi": []
            },
            "creato": today
        }
        processor.write_json(self.filepath, to_parse)

        self.assertTrue(os.path.exists(self.filepath))

    def test_read_xml_categorie(self):
        filepath = self.BASE_PATH + "/mockups/rai_feeds.xml"
        processor = TextProcessor()
        categorie = processor.read_xml_categorie(filepath)
        print(categorie)

    def test_read_xml_urls(self):
        filepath = self.BASE_PATH + "/mockups/rai_feeds.xml"
        processor = TextProcessor()
        urls = processor.read_xml_urls(filepath)
        print(urls)

    def test_create_xml_by_csv(self):
        filepath = self.BASE_PATH + "/mockups/concessionario.csv"
        processor = TextProcessor()
        processor.read_csv(filepath)

        self.filepath = self.BASE_PATH + "/mockups/concessionario_full.xml"
        processor.write_xml(self.filepath, processor.list_rows)

        processor.pretty_print(self.filepath)

    def test_beautify_xml(self):
        filepath = self.BASE_PATH + "/mockups/rai_feeds.xml"
        processor = TextProcessor()
        processor.pretty_print(filepath)

    def test_big_data(self):
        """ Test con alcuni dati pressi da https://www.kaggle.com/

        """
        filepath = self.BASE_PATH + "/mockups/complaints.csv"
        processor = TextProcessor()
        processor.read_csv(filepath)

        print(
            "Righe totali: {}".format(len(processor.list_rows))
        )

    def tearDown(self):
        if os.path.exists(self.filepath) and not self.maintain_files:
            os.unlink(self.filepath)

